{"version":3,"file":"parser.js","names":[],"sources":["../../../src/types/parser.ts"],"sourcesContent":["export type DynamicFunction = (type: string) => boolean;\n\nexport interface EncodeArgs<Value> {\n  /**\n   * The buffer to encode the value in.\n   */\n  buffer: Uint8Array;\n\n  /**\n   * The type of the value to encode.\n   */\n  type: string;\n\n  /**\n   * The value to encode.\n   */\n  value: Value;\n}\n\nexport interface DecodeArgs {\n  /**\n   * The type of the value to decode.\n   */\n  type: string;\n\n  /**\n   * The value to decode.\n   */\n  value: Uint8Array;\n\n  /**\n   * A function to skip a certain number of bytes for parsing. This is currently only used by static tuple types.\n   *\n   * @param length The number of bytes to skip.\n   */\n  skip(length: number): void;\n}\n\nexport interface Parser<EncodeValue = unknown, DecodeValue = EncodeValue> {\n  isDynamic: boolean | DynamicFunction;\n\n  isType?(type: string): boolean;\n  encode(value: EncodeArgs<EncodeValue>): Uint8Array;\n  decode(args: DecodeArgs): DecodeValue;\n}\n"],"mappings":""}