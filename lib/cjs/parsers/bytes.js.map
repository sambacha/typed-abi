{"version":3,"file":"bytes.js","names":["bytes","isDynamic","encode","buffer","value","bufferValue","toBuffer","paddedSize","Math","ceil","byteLength","concat","addPadding","decode","slice","length","Number","toNumber","subarray"],"sources":["../../../src/parsers/bytes.ts"],"sourcesContent":["import { BytesLike, DecodeArgs, Parser } from '../types';\nimport { addPadding, concat, toBuffer, toNumber } from '../utils';\n\nexport const bytes: Parser<BytesLike, Uint8Array> = {\n  isDynamic: true,\n\n  encode({ buffer, value }): Uint8Array {\n    const bufferValue = toBuffer(value);\n    const paddedSize = Math.ceil(bufferValue.byteLength / 32) * 32;\n\n    return concat([buffer, toBuffer(bufferValue.byteLength), addPadding(bufferValue, paddedSize)]);\n  },\n\n  decode({ value }: DecodeArgs): Uint8Array {\n    const buffer = value.slice(0, 32);\n    const length = Number(toNumber(buffer));\n\n    return value.subarray(32, 32 + length);\n  }\n};\n"],"mappings":";;;;;;;AACA;;AAEO,MAAMA,KAAoC,GAAG;EAClDC,SAAS,EAAE,IADuC;;EAGlDC,MAAM,CAAC;IAAEC,MAAF;IAAUC;EAAV,CAAD,EAAgC;IACpC,MAAMC,WAAW,GAAG,IAAAC,eAAA,EAASF,KAAT,CAApB;IACA,MAAMG,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,WAAW,CAACK,UAAZ,GAAyB,EAAnC,IAAyC,EAA5D;IAEA,OAAO,IAAAC,aAAA,EAAO,CAACR,MAAD,EAAS,IAAAG,eAAA,EAASD,WAAW,CAACK,UAArB,CAAT,EAA2C,IAAAE,iBAAA,EAAWP,WAAX,EAAwBE,UAAxB,CAA3C,CAAP,CAAP;EACD,CARiD;;EAUlDM,MAAM,CAAC;IAAET;EAAF,CAAD,EAAoC;IACxC,MAAMD,MAAM,GAAGC,KAAK,CAACU,KAAN,CAAY,CAAZ,EAAe,EAAf,CAAf;IACA,MAAMC,MAAM,GAAGC,MAAM,CAAC,IAAAC,eAAA,EAASd,MAAT,CAAD,CAArB;IAEA,OAAOC,KAAK,CAACc,QAAN,CAAe,EAAf,EAAmB,KAAKH,MAAxB,CAAP;EACD;;AAfiD,CAA7C"}