{"version":3,"file":"address.js","names":["address","isDynamic","encode","buffer","value","addressBuffer","fromHex","stripPrefix","padStart","concat","decode","toHex","slice"],"sources":["../../../src/parsers/address.ts"],"sourcesContent":["import { DecodeArgs, Parser } from '../types';\nimport { concat, fromHex, stripPrefix, toHex } from '../utils';\n\nexport const address: Parser<string> = {\n  isDynamic: false,\n\n  encode({ buffer, value }): Uint8Array {\n    const addressBuffer = fromHex(stripPrefix(value).padStart(64, '0'));\n\n    return concat([buffer, addressBuffer]);\n  },\n\n  decode({ value }: DecodeArgs): string {\n    return `0x${toHex(value.slice(12, 32))}`;\n  }\n};\n"],"mappings":";;;;;;;AACA;;AAEO,MAAMA,OAAuB,GAAG;EACrCC,SAAS,EAAE,KAD0B;;EAGrCC,MAAM,CAAC;IAAEC,MAAF;IAAUC;EAAV,CAAD,EAAgC;IACpC,MAAMC,aAAa,GAAG,IAAAC,cAAA,EAAQ,IAAAC,kBAAA,EAAYH,KAAZ,EAAmBI,QAAnB,CAA4B,EAA5B,EAAgC,GAAhC,CAAR,CAAtB;IAEA,OAAO,IAAAC,aAAA,EAAO,CAACN,MAAD,EAASE,aAAT,CAAP,CAAP;EACD,CAPoC;;EASrCK,MAAM,CAAC;IAAEN;EAAF,CAAD,EAAgC;IACpC,OAAQ,KAAI,IAAAO,YAAA,EAAMP,KAAK,CAACQ,KAAN,CAAY,EAAZ,EAAgB,EAAhB,CAAN,CAA2B,EAAvC;EACD;;AAXoC,CAAhC"}