{"version":3,"file":"abi.test.js","names":["decode","encode","fromHex","toHex","describe","it","expect","toBe","toStrictEqual","value"],"sources":["../../src/abi.test.ts"],"sourcesContent":["import { decode, encode } from './abi';\nimport { fromHex, toHex } from './utils';\n\ndescribe('encode', () => {\n  it('encodes static values', () => {\n    expect(toHex(encode(['uint256', 'address'], [12345n, '0x4bbeEB066eD09B7AEd07bF39EEe0460DFa261520']))).toBe(\n      '00000000000000000000000000000000000000000000000000000000000030390000000000000000000000004bbeeb066ed09b7aed07bf39eee0460dfa261520'\n    );\n  });\n\n  it('encodes static array values', () => {\n    expect(toHex(encode(['(uint256, address)[]'], [[[12345n, '0x4bbeEB066eD09B7AEd07bF39EEe0460DFa261520']]]))).toBe(\n      '0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000030390000000000000000000000004bbeeb066ed09b7aed07bf39eee0460dfa261520'\n    );\n  });\n\n  it('encodes dynamic array values', () => {\n    expect(\n      toHex(\n        encode(\n          ['(string, string)[]'],\n          [\n            [\n              ['foo bar', 'baz qux'],\n              ['quux quuz', 'corge grault']\n            ]\n          ]\n        )\n      )\n    ).toBe(\n      '0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000007666f6f2062617200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000762617a207175780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000971757578207175757a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c636f72676520677261756c740000000000000000000000000000000000000000'\n    );\n  });\n\n  it('encodes dynamic tuple values', () => {\n    expect(toHex(encode(['(string, uint256, string)'], [['foo bar', 12n, 'baz qux']]))).toBe(\n      '00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007666f6f2062617200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000762617a2071757800000000000000000000000000000000000000000000000000'\n    );\n  });\n});\n\ndescribe('decode', () => {\n  it('decodes static values', () => {\n    expect(\n      decode(\n        ['uint256', 'address'],\n        fromHex(\n          '00000000000000000000000000000000000000000000000000000000000030390000000000000000000000004bbeeb066ed09b7aed07bf39eee0460dfa261520'\n        )\n      )\n    ).toStrictEqual([12345n, '0x4bbeeb066ed09b7aed07bf39eee0460dfa261520']);\n  });\n\n  it('decodes static array values', () => {\n    const value = fromHex(\n      '0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000030390000000000000000000000004bbeeb066ed09b7aed07bf39eee0460dfa261520'\n    );\n\n    expect(decode(['(uint256, address)[]'], value)).toStrictEqual([\n      [[12345n, '0x4bbeeb066ed09b7aed07bf39eee0460dfa261520']]\n    ]);\n  });\n\n  it('decodes dynamic array values', () => {\n    const value = fromHex(\n      '0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000007666f6f2062617200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000762617a207175780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000971757578207175757a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c636f72676520677261756c740000000000000000000000000000000000000000'\n    );\n    expect(decode(['(string, string)[]'], value)).toStrictEqual([\n      [\n        ['foo bar', 'baz qux'],\n        ['quux quuz', 'corge grault']\n      ]\n    ]);\n  });\n\n  it('decodes dynamic tuple values', () => {\n    const value = fromHex(\n      '00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007666f6f2062617200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000762617a2071757800000000000000000000000000000000000000000000000000'\n    );\n    expect(decode(['(string, uint256, string)'], value)).toStrictEqual([['foo bar', 12n, 'baz qux']]);\n  });\n});\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,MAAjB,QAA+B,OAA/B;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,SAA/B;AAEAC,QAAQ,CAAC,QAAD,EAAW,MAAM;EACvBC,EAAE,CAAC,uBAAD,EAA0B,MAAM;IAChCC,MAAM,CAACH,KAAK,CAACF,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAAC,MAAD,EAAS,4CAAT,CAAzB,CAAP,CAAN,CAAN,CAAsGM,IAAtG,CACE,kIADF;EAGD,CAJC,CAAF;EAMAF,EAAE,CAAC,6BAAD,EAAgC,MAAM;IACtCC,MAAM,CAACH,KAAK,CAACF,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2B,CAAC,CAAC,CAAC,MAAD,EAAS,4CAAT,CAAD,CAAD,CAA3B,CAAP,CAAN,CAAN,CAA4GM,IAA5G,CACE,kQADF;EAGD,CAJC,CAAF;EAMAF,EAAE,CAAC,8BAAD,EAAiC,MAAM;IACvCC,MAAM,CACJH,KAAK,CACHF,MAAM,CACJ,CAAC,oBAAD,CADI,EAEJ,CACE,CACE,CAAC,SAAD,EAAY,SAAZ,CADF,EAEE,CAAC,WAAD,EAAc,cAAd,CAFF,CADF,CAFI,CADH,CADD,CAAN,CAYEM,IAZF,CAaE,kgCAbF;EAeD,CAhBC,CAAF;EAkBAF,EAAE,CAAC,8BAAD,EAAiC,MAAM;IACvCC,MAAM,CAACH,KAAK,CAACF,MAAM,CAAC,CAAC,2BAAD,CAAD,EAAgC,CAAC,CAAC,SAAD,EAAY,GAAZ,EAAiB,SAAjB,CAAD,CAAhC,CAAP,CAAN,CAAN,CAAoFM,IAApF,CACE,kgBADF;EAGD,CAJC,CAAF;AAKD,CApCO,CAAR;AAsCAH,QAAQ,CAAC,QAAD,EAAW,MAAM;EACvBC,EAAE,CAAC,uBAAD,EAA0B,MAAM;IAChCC,MAAM,CACJN,MAAM,CACJ,CAAC,SAAD,EAAY,SAAZ,CADI,EAEJE,OAAO,CACL,kIADK,CAFH,CADF,CAAN,CAOEM,aAPF,CAOgB,CAAC,MAAD,EAAS,4CAAT,CAPhB;EAQD,CATC,CAAF;EAWAH,EAAE,CAAC,6BAAD,EAAgC,MAAM;IACtC,MAAMI,KAAK,GAAGP,OAAO,CACnB,kQADmB,CAArB;IAIAI,MAAM,CAACN,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BS,KAA3B,CAAP,CAAN,CAAgDD,aAAhD,CAA8D,CAC5D,CAAC,CAAC,MAAD,EAAS,4CAAT,CAAD,CAD4D,CAA9D;EAGD,CARC,CAAF;EAUAH,EAAE,CAAC,8BAAD,EAAiC,MAAM;IACvC,MAAMI,KAAK,GAAGP,OAAO,CACnB,kgCADmB,CAArB;IAGAI,MAAM,CAACN,MAAM,CAAC,CAAC,oBAAD,CAAD,EAAyBS,KAAzB,CAAP,CAAN,CAA8CD,aAA9C,CAA4D,CAC1D,CACE,CAAC,SAAD,EAAY,SAAZ,CADF,EAEE,CAAC,WAAD,EAAc,cAAd,CAFF,CAD0D,CAA5D;EAMD,CAVC,CAAF;EAYAH,EAAE,CAAC,8BAAD,EAAiC,MAAM;IACvC,MAAMI,KAAK,GAAGP,OAAO,CACnB,kgBADmB,CAArB;IAGAI,MAAM,CAACN,MAAM,CAAC,CAAC,2BAAD,CAAD,EAAgCS,KAAhC,CAAP,CAAN,CAAqDD,aAArD,CAAmE,CAAC,CAAC,SAAD,EAAY,GAAZ,EAAiB,SAAjB,CAAD,CAAnE;EACD,CALC,CAAF;AAMD,CAxCO,CAAR"}