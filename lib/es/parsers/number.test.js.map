{"version":3,"file":"number.test.js","names":["fromHex","toHex","asNumber","isSigned","number","describe","it","expect","toBe","isType","encode","type","value","buffer","Uint8Array","decode","skip","jest","fn","negativeValue"],"sources":["../../../src/parsers/number.test.ts"],"sourcesContent":["import { fromHex, toHex } from '../utils';\nimport { asNumber, isSigned, number } from './number';\n\ndescribe('isSigned', () => {\n  it('checks if a number type is signed', () => {\n    expect(isSigned('int')).toBe(true);\n    expect(isSigned('int256')).toBe(true);\n    expect(isSigned('int123')).toBe(true);\n\n    expect(isSigned('uint')).toBe(false);\n    expect(isSigned('uint256')).toBe(false);\n    expect(isSigned('uint123')).toBe(false);\n  });\n});\n\ndescribe('asNumber', () => {\n  it('returns a bigint for a number-like input', () => {\n    expect(asNumber(123)).toBe(123n);\n    expect(asNumber('123')).toBe(123n);\n    expect(asNumber('0x123')).toBe(291n);\n  });\n});\n\ndescribe('number', () => {\n  describe('isType', () => {\n    it('checks if a type is a number type', () => {\n      expect(number.isType?.('uint256')).toBe(true);\n      expect(number.isType?.('uint128')).toBe(true);\n      expect(number.isType?.('uint')).toBe(true);\n      expect(number.isType?.('int256')).toBe(true);\n      expect(number.isType?.('int128')).toBe(true);\n      expect(number.isType?.('int')).toBe(true);\n\n      expect(number.isType?.('string')).toBe(false);\n      expect(number.isType?.('(uint256)')).toBe(false);\n      expect(number.isType?.('uint256[]')).toBe(false);\n    });\n  });\n\n  describe('encode', () => {\n    it('encodes a unsigned number', () => {\n      expect(toHex(number.encode({ type: 'uint256', value: 314159n, buffer: new Uint8Array() }))).toBe(\n        '000000000000000000000000000000000000000000000000000000000004cb2f'\n      );\n      expect(toHex(number.encode({ type: 'uint256', value: 314159, buffer: new Uint8Array() }))).toBe(\n        '000000000000000000000000000000000000000000000000000000000004cb2f'\n      );\n      expect(toHex(number.encode({ type: 'uint256', value: '314159', buffer: new Uint8Array() }))).toBe(\n        '000000000000000000000000000000000000000000000000000000000004cb2f'\n      );\n      expect(toHex(number.encode({ type: 'uint256', value: '0x314159', buffer: new Uint8Array() }))).toBe(\n        '0000000000000000000000000000000000000000000000000000000000314159'\n      );\n    });\n\n    it('encodes a signed number', () => {\n      expect(toHex(number.encode({ type: 'int256', value: -314159n, buffer: new Uint8Array() }))).toBe(\n        'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb34d1'\n      );\n      expect(toHex(number.encode({ type: 'int256', value: -314159, buffer: new Uint8Array() }))).toBe(\n        'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb34d1'\n      );\n      expect(toHex(number.encode({ type: 'int256', value: '-314159', buffer: new Uint8Array() }))).toBe(\n        'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb34d1'\n      );\n    });\n  });\n\n  describe('decode', () => {\n    it('decodes an encoded unsigned number', () => {\n      const value = fromHex('000000000000000000000000000000000000000000000000000000000004cb2f');\n      expect(number.decode({ type: 'uint256', value, skip: jest.fn() })).toBe(314159n);\n    });\n\n    it('decodes an encoded signed number', () => {\n      const value = fromHex('000000000000000000000000000000000000000000000000000000000004cb2f');\n      expect(number.decode({ type: 'int256', value, skip: jest.fn() })).toBe(314159n);\n\n      const negativeValue = fromHex('fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb34d1');\n      expect(number.decode({ type: 'int256', value: negativeValue, skip: jest.fn() })).toBe(-314159n);\n    });\n  });\n});\n"],"mappings":"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"}