{"version":3,"file":"tuple.js","names":["getParser","isDynamicParser","pack","unpack","TUPLE_REGEX","getTupleElements","type","slice","split","map","trim","tuple","isDynamic","elements","some","element","parser","isType","test","encode","buffer","value","decode","skip","length"],"sources":["../../../src/parsers/tuple.ts"],"sourcesContent":["import { getParser, isDynamicParser, pack, unpack } from '../packer';\nimport type { DecodeArgs, Parser } from '../types';\n\n/*eslint require-unicode-regexp: error */\n// @see {@link https://eslint.org/docs/rules/require-unicode-regexp}\nconst TUPLE_REGEX = /^\\((.*)\\)$/;\n\n/**\n * Get elements from a tuple type.\n *\n * @param type The tuple type to get the types for.\n * @return The elements of the tuple as string array.\n */\nexport const getTupleElements = (type: string): string[] => {\n  return type\n    .slice(1, -1)\n    .split(',')\n    .map((type) => type.trim());\n};\n\nexport const tuple: Parser<unknown[]> = {\n  /**\n   * Check if the tuple is dynamic. Tuples are dynamic if one or more elements of the tuple are dynamic.\n   *\n   * @param type The type to check.\n   * @return Whether the tuple is dynamic.\n   */\n  isDynamic(type: string): boolean {\n    const elements = getTupleElements(type);\n    return elements.some((element) => {\n      const parser = getParser(element);\n      return isDynamicParser(parser, element);\n    });\n  },\n\n  /**\n   * Check if a type is an tuple type.\n   *\n   * @param type The type to check.\n   * @return Whether the type is a tuple type.\n   */\n  isType(type: string): boolean {\n    return TUPLE_REGEX.test(type);\n  },\n\n  encode({ type, buffer, value }): Uint8Array {\n    const elements = getTupleElements(type);\n    return pack(elements, value, buffer);\n  },\n\n  decode({ type, value, skip }: DecodeArgs): unknown[] {\n    const elements = getTupleElements(type);\n    const length = elements.length * 32 - 32;\n\n    if (!isDynamicParser(this, type)) {\n      skip(length);\n    }\n\n    return unpack(elements, value);\n  }\n};\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,eAApB,EAAqCC,IAArC,EAA2CC,MAA3C,QAAyD,WAAzD;;AAGA;AACA;AACA,MAAMC,WAAW,GAAG,YAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAA4B;EAC1D,OAAOA,IAAI,CACRC,KADI,CACE,CADF,EACK,CAAC,CADN,EAEJC,KAFI,CAEE,GAFF,EAGJC,GAHI,CAGCH,IAAD,IAAUA,IAAI,CAACI,IAAL,EAHV,CAAP;AAID,CALM;AAOP,OAAO,MAAMC,KAAwB,GAAG;EACtC;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,CAACN,IAAD,EAAwB;IAC/B,MAAMO,QAAQ,GAAGR,gBAAgB,CAACC,IAAD,CAAjC;IACA,OAAOO,QAAQ,CAACC,IAAT,CAAeC,OAAD,IAAa;MAChC,MAAMC,MAAM,GAAGhB,SAAS,CAACe,OAAD,CAAxB;MACA,OAAOd,eAAe,CAACe,MAAD,EAASD,OAAT,CAAtB;IACD,CAHM,CAAP;EAID,CAbqC;;EAetC;AACF;AACA;AACA;AACA;AACA;EACEE,MAAM,CAACX,IAAD,EAAwB;IAC5B,OAAOF,WAAW,CAACc,IAAZ,CAAiBZ,IAAjB,CAAP;EACD,CAvBqC;;EAyBtCa,MAAM,CAAC;IAAEb,IAAF;IAAQc,MAAR;IAAgBC;EAAhB,CAAD,EAAsC;IAC1C,MAAMR,QAAQ,GAAGR,gBAAgB,CAACC,IAAD,CAAjC;IACA,OAAOJ,IAAI,CAACW,QAAD,EAAWQ,KAAX,EAAkBD,MAAlB,CAAX;EACD,CA5BqC;;EA8BtCE,MAAM,CAAC;IAAEhB,IAAF;IAAQe,KAAR;IAAeE;EAAf,CAAD,EAA+C;IACnD,MAAMV,QAAQ,GAAGR,gBAAgB,CAACC,IAAD,CAAjC;IACA,MAAMkB,MAAM,GAAGX,QAAQ,CAACW,MAAT,GAAkB,EAAlB,GAAuB,EAAtC;;IAEA,IAAI,CAACvB,eAAe,CAAC,IAAD,EAAOK,IAAP,CAApB,EAAkC;MAChCiB,IAAI,CAACC,MAAD,CAAJ;IACD;;IAED,OAAOrB,MAAM,CAACU,QAAD,EAAWQ,KAAX,CAAb;EACD;;AAvCqC,CAAjC"}