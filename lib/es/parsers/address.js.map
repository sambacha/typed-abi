{"version":3,"file":"address.js","names":["concat","fromHex","stripPrefix","toHex","address","isDynamic","encode","buffer","value","addressBuffer","padStart","decode","slice"],"sources":["../../../src/parsers/address.ts"],"sourcesContent":["import type { DecodeArgs, Parser } from '../types';\nimport { concat, fromHex, stripPrefix, toHex } from '../utils';\n\nexport const address: Parser<string> = {\n  isDynamic: false,\n\n  encode({ buffer, value }): Uint8Array {\n    const addressBuffer = fromHex(stripPrefix(value).padStart(64, '0'));\n\n    return concat([buffer, addressBuffer]);\n  },\n\n  decode({ value }: DecodeArgs): string {\n    return `0x${toHex(value.slice(12, 32))}`;\n  }\n};\n"],"mappings":"AACA,SAASA,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,KAAvC,QAAoD,UAApD;AAEA,OAAO,MAAMC,OAAuB,GAAG;EACrCC,SAAS,EAAE,KAD0B;;EAGrCC,MAAM,CAAC;IAAEC,MAAF;IAAUC;EAAV,CAAD,EAAgC;IACpC,MAAMC,aAAa,GAAGR,OAAO,CAACC,WAAW,CAACM,KAAD,CAAX,CAAmBE,QAAnB,CAA4B,EAA5B,EAAgC,GAAhC,CAAD,CAA7B;IAEA,OAAOV,MAAM,CAAC,CAACO,MAAD,EAASE,aAAT,CAAD,CAAb;EACD,CAPoC;;EASrCE,MAAM,CAAC;IAAEH;EAAF,CAAD,EAAgC;IACpC,OAAQ,KAAIL,KAAK,CAACK,KAAK,CAACI,KAAN,CAAY,EAAZ,EAAgB,EAAhB,CAAD,CAAsB,EAAvC;EACD;;AAXoC,CAAhC"}