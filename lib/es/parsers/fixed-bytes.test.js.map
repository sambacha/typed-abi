{"version":3,"file":"fixed-bytes.test.js","names":["fromHex","toHex","fixedBytes","getByteLength","describe","it","expect","toBe","toThrow","isType","encode","type","value","buffer","Uint8Array","decode","skip","jest","fn"],"sources":["../../../src/parsers/fixed-bytes.test.ts"],"sourcesContent":["import { fromHex, toHex } from '../utils';\nimport { fixedBytes, getByteLength } from './fixed-bytes';\n\ndescribe('getByteLength', () => {\n  it('returns the byte length for a type', () => {\n    expect(getByteLength('bytes32')).toBe(32);\n    expect(getByteLength('bytes16')).toBe(16);\n    expect(getByteLength('bytes1')).toBe(1);\n  });\n\n  it('throws an error if the length is invalid', () => {\n    expect(() => getByteLength('bytes64')).toThrow();\n    expect(() => getByteLength('bytes0')).toThrow();\n    expect(() => getByteLength('bytes')).toThrow();\n  });\n});\n\ndescribe('fixed-bytes', () => {\n  describe('isType', () => {\n    it('checks if a type is a fixed bytes type', () => {\n      expect(fixedBytes.isType?.('bytes32')).toBe(true);\n      expect(fixedBytes.isType?.('bytes16')).toBe(true);\n      expect(fixedBytes.isType?.('bytes1')).toBe(true);\n\n      expect(fixedBytes.isType?.('bytes')).toBe(false);\n      expect(fixedBytes.isType?.('bytes32[]')).toBe(false);\n      expect(fixedBytes.isType?.('(bytes32)')).toBe(false);\n    });\n  });\n\n  describe('encode', () => {\n    it('encodes fixed bytes', () => {\n      expect(\n        toHex(\n          fixedBytes.encode({\n            type: 'bytes32',\n            value: 'abcdef1234567890000000000000000000000000000000000000000000000000',\n            buffer: new Uint8Array()\n          })\n        )\n      ).toBe('abcdef1234567890000000000000000000000000000000000000000000000000');\n    });\n\n    it('throws if the length is invalid', () => {\n      expect(() =>\n        fixedBytes.encode({ type: 'bytes32', value: 'abcdef123456789', buffer: new Uint8Array() })\n      ).toThrow();\n    });\n  });\n\n  describe('decode', () => {\n    it('decodes encoded fixed bytes', () => {\n      const value = fromHex('abcdef1234567890000000000000000000000000000000000000000000000000');\n      expect(toHex(fixedBytes.decode({ type: 'bytes32', value, skip: jest.fn() }))).toBe(\n        'abcdef1234567890000000000000000000000000000000000000000000000000'\n      );\n    });\n  });\n});\n"],"mappings":"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"}