{"version":3,"file":"bool.test.js","names":["fromHex","toHex","bool","getBooleanValue","describe","it","expect","toBe","encode","type","value","buffer","Uint8Array","trueValue","decode","skip","jest","fn","falseValue"],"sources":["../../../src/parsers/bool.test.ts"],"sourcesContent":["import { fromHex, toHex } from '../utils';\nimport { bool, getBooleanValue } from './bool';\n\ndescribe('getBooleanValue', () => {\n  it('returns a bigint for a boolean-like value', () => {\n    expect(getBooleanValue(true)).toBe(1n);\n    expect(getBooleanValue('true')).toBe(1n);\n    expect(getBooleanValue('yes')).toBe(1n);\n\n    expect(getBooleanValue(false)).toBe(0n);\n    expect(getBooleanValue('false')).toBe(0n);\n    expect(getBooleanValue('no')).toBe(0n);\n\n    // @ts-expect-error Invalid input\n    expect(getBooleanValue('foo bar')).toBe(0n);\n  });\n});\n\ndescribe('boolean', () => {\n  describe('encode', () => {\n    it('encodes a boolean', () => {\n      expect(toHex(bool.encode({ type: 'bool', value: true, buffer: new Uint8Array() }))).toBe(\n        '0000000000000000000000000000000000000000000000000000000000000001'\n      );\n      expect(toHex(bool.encode({ type: 'bool', value: 'true', buffer: new Uint8Array() }))).toBe(\n        '0000000000000000000000000000000000000000000000000000000000000001'\n      );\n\n      expect(toHex(bool.encode({ type: 'bool', value: false, buffer: new Uint8Array() }))).toBe(\n        '0000000000000000000000000000000000000000000000000000000000000000'\n      );\n      expect(toHex(bool.encode({ type: 'bool', value: 'false', buffer: new Uint8Array() }))).toBe(\n        '0000000000000000000000000000000000000000000000000000000000000000'\n      );\n    });\n  });\n\n  describe('decode', () => {\n    it('decodes an encoded boolean', () => {\n      const trueValue = fromHex('0000000000000000000000000000000000000000000000000000000000000001');\n      expect(bool.decode({ type: 'bool', value: trueValue, skip: jest.fn() })).toBe(true);\n\n      const falseValue = fromHex('0000000000000000000000000000000000000000000000000000000000000000');\n      expect(bool.decode({ type: 'bool', value: falseValue, skip: jest.fn() })).toBe(false);\n    });\n  });\n});\n"],"mappings":"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"}