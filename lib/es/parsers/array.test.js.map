{"version":3,"file":"array.test.js","names":["fromHex","toHex","array","getArrayType","describe","it","expect","toBe","toThrow","isType","encode","type","value","buffer","Uint8Array","decode","skip","jest","fn","toStrictEqual"],"sources":["../../../src/parsers/array.test.ts"],"sourcesContent":["import { fromHex, toHex } from '../utils';\nimport { array, getArrayType } from './array';\n\ndescribe('getArrayType', () => {\n  it('returns the type of the array', () => {\n    expect(getArrayType('uint256[]')).toBe('uint256');\n    expect(getArrayType('uint256[][]')).toBe('uint256[]');\n    expect(getArrayType('(uint256)[]')).toBe('(uint256)');\n    expect(getArrayType('(uint256[])[]')).toBe('(uint256[])');\n  });\n\n  it('throws if a type is not an array type', () => {\n    expect(() => getArrayType('uint256')).toThrow();\n    expect(() => getArrayType('(uint256)')).toThrow();\n  });\n});\n\ndescribe('array', () => {\n  describe('isType', () => {\n    it('checks if a type is a tuple type', () => {\n      expect(array.isType?.('uint256[]')).toBe(true);\n      expect(array.isType?.('uint256[][]')).toBe(true);\n\n      expect(array.isType?.('uint256')).toBe(false);\n      expect(array.isType?.('(uint256)')).toBe(false);\n    });\n  });\n\n  describe('encode', () => {\n    it('encodes an array', () => {\n      expect(toHex(array.encode({ type: 'uint256[]', value: [12n, 34n, 56n, 78n], buffer: new Uint8Array() }))).toBe(\n        '0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000004e'\n      );\n    });\n\n    it('encodes a nested array', () => {\n      expect(\n        toHex(\n          array.encode({\n            type: 'uint256[][]',\n            value: [\n              [12n, 34n],\n              [56n, 78n]\n            ],\n            buffer: new Uint8Array()\n          })\n        )\n      ).toBe(\n        '0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000004e'\n      );\n    });\n  });\n\n  describe('decode', () => {\n    it('decodes an encoded array', () => {\n      const value = fromHex(\n        '0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000004e'\n      );\n\n      expect(array.decode({ type: 'uint256[]', value, skip: jest.fn() })).toStrictEqual([12n, 34n, 56n, 78n]);\n    });\n\n    it('decodes an encoded nested array', () => {\n      const value = fromHex(\n        '0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000004e'\n      );\n\n      expect(array.decode({ type: 'uint256[][]', value, skip: jest.fn() })).toStrictEqual([\n        [12n, 34n],\n        [56n, 78n]\n      ]);\n    });\n  });\n});\n"],"mappings":"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"}